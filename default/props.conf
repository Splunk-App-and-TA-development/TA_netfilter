[syslog]
TRANSFORMS-syslog_netfilter = netfilter_sourcetyping

[linux:netfilter]
FIELDALIAS-netfilter_src = SRC AS src
FIELDALIAS-netfilter_src_ip = SRC AS src_ip
FIELDALIAS-netfilter_src_port = SPT AS src_port
FIELDALIAS-netfilter_dest = DST AS dest
FIELDALIAS-netfilter_dest_ip = DST AS dest_ip
FIELDALIAS-netfilter_dest_port = DPT AS dest_port
FIELDALIAS-netfilter_tos = TOS AS tos
FIELDALIAS-netfilter_ttl = TTL AS ttl
# N.B. The 'CODE' field of netfilter icmp logs has not been FIELDALIASed to the CIM field 'icmp_code' because unlike the 'icmp_type' CIM field, 'icmp_code' requires the RFC human-readable format rather than the numeric format netfilter produces
FIELDALIAS-netfilter_icmp_type = TYPE AS icmp_type
FIELDALIAS-netfilter_dvc = host AS dvc
FIELDALIAS-netfilter_dvc_host = host AS dvc_host
FIELDALIAS-netfilter_src_interface = IN AS src_interface
FIELDALIAS-netfilter_dest_interface = OUT AS dest_interface
FIELDALIAS-netfilter_uid = UID AS uid
FIELDALIAS-netfilter_gid = GID AS gid
EVAL-direction = if(isnull(IN),"outbound","inbound")
EVAL-vendor_product = "Linux Netfilter"
EVAL-protocol = "ip"
REPORT-netfilter_mac = netfilter_mac
REPORT-netfilter_flags = netfilter_flags
REPORT-netfilter_tcp_flag = netfilter_tcp_flag
LOOKUP-netfilter_action = netfilter_action event_action AS ACTION OUTPUT cim_action AS action
# N.B. The CIM does not currently consider ICMP to be a layer 4 protocol (but Netfilter does) and so rather than simply using an EVAL with 'lower(PROTO)' to create the CIM-normalised 'transport' field, a lookup has been used below (according to Splunk Professional Services lookups are preferable over EVAL case statements in situations like this)
LOOKUP-netfilter_transport = netfilter_transport PROTO OUTPUT transport

# N.B. the lookup below requires the TA_linux-auditd app (https://splunkbase.splunk.com/app/2642/) to be installed and configured
#LOOKUP-netfilter_user = posix_identities uid AS UID OUTPUT user
